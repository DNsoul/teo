import React, { useState, useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import Table from "../Table";
import { actions } from "../../reducer";

const head = (
  <thead>
    <tr>
      <th className="is-size-7" style={{ width: 224 }}>
        Должность
      </th>
      <th className="is-size-7" style={{ width: 154 }}>
        Должностной оклад, руб.
      </th>
      <th className="is-size-7" style={{ width: 174 }}>
        Среднее количество рабочих дней в месяц
      </th>
      <th className="is-size-7" style={{ width: 124 }}>
        Средняя дневная ставка, руб.
      </th>
      <th className="is-size-7" style={{ width: 154 }}>
        Затраты на эксплуатацию, человекодней
      </th>
      <th className="is-size-7" style={{ width: 124 }}>
        Фонд заработной платы, руб.
      </th>
    </tr>
  </thead>
);

const initProjectBody = [
  ["Сотрудник отдела МТС", "15000", "21", "714.29", "40", "52080.00"],
  ["Системный администратор", "10000", "21", "476.19", "20", "17360.00"],
];

const initAnalogBody = [
  ["Сотрудник отдела МТС", "15000", "21", "714.29", "60", "78120.00"],
  ["Системный администратор", "10000", "21", "476.19", "40", "21706.20"],
];

const setting = [
  { width: 200, disabled: false },
  { width: 130, disabled: false, type: "number" },
  { width: 150, disabled: false, type: "number" },
  { width: 100, disabled: false, type: "number" },
  { width: 130, disabled: false, type: "number" },
  { width: 100, disabled: true, type: "number" },
];

const StageExploitation = () => {
  const [dataProject, setProjectData] = useState(initProjectBody);
  const [dataAnalog, setAnalogData] = useState(initAnalogBody);

  const explCoff = useSelector((state) => state.explCoff);
  const devSpend = useSelector((state) => state.devSpend);

  const dispatch = useDispatch();

  const onProjectChange = (prevData, idxr, idxc, value) => {
    const row = prevData[idxr];

    row[idxc] = value;

    row[3] = (row[1] / row[2]).toFixed(2);
    row[5] = (
      row[3] *
      row[4] *
      (1 + devSpend[1] + explCoff[7]) *
      1.302
    ).toFixed(2);

    prevData[idxr] = row;
    setProjectData(prevData.slice());
  };

  const onAnalogChange = (prevData, idxr, idxc, value) => {
    const row = prevData[idxr];

    row[idxc] = value;

    row[3] = (row[1] / row[2]).toFixed(2);
    row[5] = (
      row[3] *
      row[4] *
      (1 + devSpend[1] + explCoff[7]) *
      1.302
    ).toFixed(2);

    prevData[idxr] = row;
    setAnalogData(prevData.slice());
  };

  useEffect(() => {
    const newDataProject = dataProject.slice();
    const newDataAnalog = dataAnalog.slice();

    newDataProject[0][5] = (
      newDataProject[0][3] *
      newDataProject[0][4] *
      (1 + devSpend[1] + explCoff[7]) *
      1.302
    ).toFixed(2);
    newDataProject[1][5] = (
      newDataProject[1][3] *
      newDataProject[1][4] *
      (1 + devSpend[1] + explCoff[7]) *
      1.302
    ).toFixed(2);
    newDataAnalog[0][5] = (
      newDataAnalog[0][3] *
      newDataAnalog[0][4] *
      (1 + devSpend[1] + explCoff[7]) *
      1.302
    ).toFixed(2);
    newDataAnalog[1][5] = (
      newDataAnalog[1][3] *
      newDataAnalog[1][4] *
      (1 + devSpend[1] + explCoff[7]) *
      1.302
    ).toFixed(2);

    setAnalogData(newDataAnalog);
    setProjectData(newDataProject);
  }, []);

  const prj = dataProject.reduce((p, n) => p + Number(n[5]), 0).toFixed(2);
  const alg = dataAnalog.reduce((p, n) => p + Number(n[5]), 0).toFixed(2);
  const prjDat = dataProject.reduce((p, n) => p + Number(n[4]), 0).toFixed(2);
  const algDat = dataAnalog.reduce((p, n) => p + Number(n[4]), 0).toFixed(2);

  useEffect(() => {
    dispatch(actions.setProjPrice(prj));
    dispatch(actions.setAnlgPrice(alg));
    dispatch(actions.setProjDay(prjDat));
    dispatch(actions.setAnlgDay(algDat));
  }, [dataProject, dataAnalog]);

  return (
    <div>
      <div className="box">
        <span className="has-text-weight-bold">
          Основная заработная плата (для проекта):
        </span>
        <span> {prj} руб.</span>
        <br />
        <span className="has-text-weight-bold">
          Основная заработная плата (для аналога):
        </span>
        <span> {alg} руб.</span>
        <br />
      </div>
      <div className="box m-0 p-0 has-text-centered">
        <span className="is-size-6">Данные по заработной плате специалистов (для проекта)</span>
      </div>
      <Table
        head={head}
        body={dataProject}
        updateData={onProjectChange}
        setting={setting}
      />
      <div className="box m-0 p-0 has-text-centered">
        <span className="is-size-6">
          Данные по заработной плате специалистов (для продукта-аналога)
        </span>
      </div>
      <Table
        head={head}
        body={dataAnalog}
        updateData={onAnalogChange}
        setting={setting}
      />
    </div>
  );
};

export default StageExploitation;
